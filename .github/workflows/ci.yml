name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 mypy black isort
          
      - name: Run flake8
        run: flake8 genai-doc-ingestion
        
      - name: Run mypy
        run: mypy genai-doc-ingestion
        
      - name: Run black check
        run: black --check genai-doc-ingestion
        
      - name: Run isort check
        run: isort --check --profile black genai-doc-ingestion

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run unit tests
        run: |
          pytest tests/unit --cov=genai-doc-ingestion --cov-report=xml
          
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ./genai-doc-ingestion/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
      
      - name: Terraform Apply
        run: terraform apply -auto-approve
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, terraform]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel
          
      - name: Build package
        run: python -m build
        
      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 5

  deploy:
    name: Deploy to Environment
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ./dist
      
      - name: Build Docker image
        run: |
          docker build -t genai-doc-ingestion:${{ github.sha }} .
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  notify:
    name: 'Notification'
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: failure()
    
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-alerts
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: 'CI/CD Pipeline Failed'
          SLACK_MESSAGE: 'The CI/CD pipeline has failed. Please check the logs for more details.'
      
      - name: Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: CI/CD Pipeline Failed
          body: The CI/CD pipeline for AWS-RAG has failed. Please check the GitHub Actions logs for more details.
          to: team@example.com
          from: CI/CD Pipeline
